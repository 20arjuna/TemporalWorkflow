version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: trellis_postgres
    environment:
      POSTGRES_USER: trellis
      POSTGRES_PASSWORD: trellis
      POSTGRES_DB: trellis
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trellis"]
      interval: 5s
      timeout: 5s
      retries: 5

  temporal:
    image: temporalio/auto-setup:latest
    container_name: trellis_temporal
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=trellis
      - POSTGRES_PWD=trellis
      - POSTGRES_SEEDS=postgres
    ports:
      - "7233:7233"
      - "8233:8233"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "pgrep", "temporal-server"]
      interval: 10s
      timeout: 5s
      retries: 10

  order-worker:
    build:
      context: .
      dockerfile: dockerfile
    container_name: trellis_order_worker
    command: python3 workers/order_worker.py
    volumes:
      - .:/app
    working_dir: /app
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
    depends_on:
      temporal:
        condition: service_healthy
    restart: unless-stopped

  shipping-worker:
    build:
      context: .
      dockerfile: dockerfile
    container_name: trellis_shipping_worker
    command: python3 workers/shipping_worker.py
    volumes:
      - .:/app
    working_dir: /app
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
    depends_on:
      temporal:
        condition: service_healthy
    restart: unless-stopped

  api-server:
    build:
      context: .
      dockerfile: dockerfile
    container_name: trellis_api_server
    command: python3 run.py
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    working_dir: /app
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
    depends_on:
      temporal:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  cli:
    build:
      context: .
      dockerfile: dockerfile
    container_name: trellis_cli
    command: python3 cli.py
    volumes:
      - .:/app
    working_dir: /app
    environment:
      - DB_HOST=localhost
      - DB_PORT=5433
    stdin_open: true    # For interactive input
    tty: true          # For colors
    depends_on:
      - temporal
    network_mode: "host"  # Use host networking

volumes:
  db-data: